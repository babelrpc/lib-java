package com.concur.babel.transport;

import java.util.List;
import java.util.Map;

import com.concur.babel.protocol.JSONProtocol;
import com.concur.babel.transport.handler.ResponseHandler;

/**
 * BaseClient is the base client class for all client code generated by babel.  By default a client
 * will use a HTTP transport and JSON protocol but can be configured to uses any transport and
 * protocol combination.
 */
public abstract class BaseClient {
	
	protected final Transport transport;
    
	/**
	 * BaseClient creates an instance of a babel client using a Http transport and JSON protocol.
	 * 
	 * @param url - The base URL of your babel service layer.
	 */
    public BaseClient(String url) {
    	this(new HttpTransport(url, new JSONProtocol()));
    }	
    
    /**
	 * BaseClient creates an instance of a babel client using a Http transport and JSON protocol.
	 * 
	 * @param url - The base URL of your babel service layer.
	 * @param handlers - A list of ResponseHandler objects
	 */
    public BaseClient(String url, List<ResponseHandler> handlers) {
    	this(new HttpTransport(url, new JSONProtocol()), handlers);
    }
    
    /**
     * BaseClient creates an instance of a babel client using a Http transport and JSON protocol.
     * 
     * @param url - The base URL of your babel service layer.
     * @param timeoutInMillis - The connection and read timeout to be used by the http transport.
     */
    public BaseClient(String url, int timeoutInMillis) {
    	this(new HttpTransport(url, new JSONProtocol(), timeoutInMillis));
    }
    
    /**
     * BaseClient creates an instance of a babel client using a Http transport and JSON protocol.
     * 
     * @param url - The base URL of your babel service layer.
     * @param timeoutInMillis - The connection and read timeout to be used by the http transport.
     * @param handlers - A list of ResponseHandler objects
     */
    public BaseClient(String url, int timeoutInMillis, List<ResponseHandler> handlers) {
    	this(new HttpTransport(url, new JSONProtocol(), timeoutInMillis), handlers);
    }
    
    /**
     * BaseClient creates and instance of a babel client using the provided transport and defaults
     * to using a JSON protocol.
     * 
     * @param transport - The transport used by this client.
     */
    public BaseClient(Transport transport) {
    	this.transport = transport;
    }
    
    /**
     * BaseClient creates and instance of a babel client using the provided transport and defaults
     * to using a JSON protocol.
     * 
     * @param transport - The transport used by this client.
     * @param handlers - A list of ResponseHandler objects
     */
    public BaseClient(Transport transport, List<ResponseHandler> handlers) {
    	this.transport = transport;
    	this.addResponseHandlers(handlers);
    }
    
    /**
     * Method setHeaders will set header values for the message being sent by this transport.
     * 
     * @param headers - the headers to set.
     */
    public void setHeaders(Map<String, String> headers) {
    	this.transport.setHeaders(headers);
    }
    
    /**
     * Method setHeader set a new header for the message being sent by this transport.
     * 
     * @param key = the key of the header.
     * @param value = the value of the header.
     */
    public void setHeader(String key, String value) {
    	this.transport.setHeader(key, value);
    }
    
    /**
     * Method addResponseHandlers adds a list of ResponseHandler objects to the transport used by this client.
     * 
     * @param handlers
     */
    public void addResponseHandlers(List<ResponseHandler> handlers) {
    	this.transport.addResponseHandlers(handlers);
    }
    
    /**
     * Method addResponseHandler adds a ResponseHandler to the transport used by this client.
     * 
     * @param handler
     */
    public void addResponseHandler(ResponseHandler handler) {
    	this.transport.addResponseHandler(handler);
    }
    
    /**
     * Method setMaxRetries sets the maxRetries on the transport used by this client.
     * 
     * @param maxRetries The number of times to retry the service call in the event of a failed call.
     */
    public void setMaxRetries(int maxRetries) {
    	this.transport.setMaxRetries(maxRetries);
    }
    
    /**
     * Method setRetryDelay sets the retryDelay on the transport used by this client.
     * 
     * @param retryDelay The amount of time in ms to delay between retry attempts.
     */
    public void setRetryDelay(long retryDelay) {
    	this.transport.setRetryDelay(retryDelay);
    }
    
}
